{"version":3,"sources":["store/modules/index.js","store/index.js","component/Map/index.jsx","component/App/index.jsx","index.js"],"names":["getDataAsync","createAction","otp","dispatch","naver","_lat","_lng","Promise","resolve","maps","Service","reverseGeocode","location","LatLng","status","response","Status","OK","addr","result","items","converLatLngToAddr","then","rtn","console","log","sig","zoomLevel","parentCd","emd","country","url","process","axios","request","headers","method","getMiseDate","type","payload","catch","error","handleActions","state","action","data","map","gridData","geoData","i","properties","LOC_KOR_NM","AIR_LV","KOR_LV","mapObj","lat","lng","store","createStore","modules","applyMiddleware","ReduxThunk","styleOptions","fillOpacity","fillColor","strokeColor","strokeWeight","strokeOpacity","Map","React","createRef","_ncpClientId","requestUrl","loadJs","window","onJSContentLoaded","this","props","ncpClientId","loadScriptPromise","zoomRange","maxZoom","length","minZoom","mapOptions","logoControl","mapDataControl","scaleControl","center","draggable","scrollWheel","keyboardShortcuts","disableDoubleTapZoom","disableDoubleClickZoom","disableTwoFingerTapZoom","zoom","setState","prevState","newMap","setStyle","feature","property_KOR_LV","addListener","e","overrideStyle","revertStyle","bounds","getCenter","x","y","currentZoom","getZoom","property_LOC_CD","indexOf","tempArr","slice","push","setZoom","setCenter","nextIdx","shift","ex","allFeature","getAllFeature","item","removeFeature","forEach","element","addGeoJson","id","style","width","height","ref","Component","connect","bindActionCreators","columns","name","title","rowHeight","bodyHeight","virtualScrolling","heightResizable","rowHeaders","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.09877175.chunk.js","sourcesContent":["import { handleActions, createAction } from 'redux-actions'\nimport axios from 'axios'\n\nconst getMiseDate = (otp) => {\n  console.log('getMiose', otp)\n\n  // parentCd : 사용자가 클릭한 geoJSON의 코드값.\n  // zoomLevel : 요청 레벨.\n  let serverUrl = process.env.REACT_APP_SERVER_URL\n  let sig = `/sig?zoomLevel=${otp.zoomLevel}&parentCd=${otp.parentCd}`\n  let emd = `/emd?zoomLevel=${otp.zoomLevel}&parentCd=${otp.parentCd}`\n  let country = `/country?zoomLevel=${otp.zoomLevel}&parentCd=${otp.parentCd}`\n\n  let url = serverUrl +\n  (otp.zoomLevel === 2 ? country\n  : otp.zoomLevel === 4 ? sig\n  : otp.zoomLevel === 6 ? emd : \"\")\n  \n  return axios.request({\n    headers: {\n      'Content-Type': 'application/json;charset=UTF-8'\n    },\n    method: 'GET',\n    url: url\n  })\n}\n\n// 한글 주소로 변환한다.\nconst converLatLngToAddr = (otp) => {\n  const { naver, _lat, _lng } = otp\n\n  return new Promise((resolve) => {\n    naver.maps.Service.reverseGeocode({ location: new naver.maps.LatLng(_lat, _lng) }, (status, response) => {\n      if (status === naver.maps.Service.Status.OK) {\n        let addr = response.result.items[0]\n        resolve(addr)\n      }\n    })\n  })\n}\n\n// Action\nconst GET_MISE_DATA = 'GET_MISE_DATA'\n\n// React에서 호출하는 부분\nexport const getData = createAction(GET_MISE_DATA)\n\nexport const getDataAsync = (otp) => dispatch => {\n  // 주소변환.\n  converLatLngToAddr(otp).then(rtn => \n     getMiseDate({ ...otp, addr: rtn })\n  ).then(rtn => {\n    // 요청이 성공했을경우, 서버 응답내용을 payload 로 설정하여 GET_POST_SUCCESS 액션을 디스패치합니다.\n\n    dispatch({\n      type: GET_MISE_DATA,\n      payload: { ...rtn, ...otp }\n    })\n  }).catch(error => {\n    // 에러가 발생했을 경우, 에로 내용을 payload 로 설정하여 GET_POST_FAILURE 액션을 디스패치합니다.\n    dispatch({\n      type: GET_MISE_DATA,\n      payload: { ...error, ...otp }\n    })\n  })\n}\n\n// 행정구역의 레벨. (줌 레벨)\n// 중앙 : 충주.\nconst counterInitialState = {\n  data: {},\n  mapObj: {},\n  zoomLevel: 2,\n  lat: 36.9257913,\n  lng: 127.87798\n}\n\n// 리듀서.\nexport default handleActions({\n  [GET_MISE_DATA]: (state, action) => {\n    const { data, _lat, _lng, map, zoomLevel } = action.payload\n\n    let gridData = []\n    if (data&& data.geoData) {\n      gridData = data.geoData.map(i => {\n        return { 'id': i.properties.LOC_KOR_NM, 'name': i.properties.AIR_LV, 'etc': i.properties.KOR_LV }\n      })\n    }\n\n    return {\n      ...state,\n      'zoomLevel': zoomLevel,\n      'mapObj': map,\n      'lat': _lat,\n      'lng': _lng,\n      'data': data,\n      'gridData': gridData\n    }\n  }\n}, counterInitialState)\n","import { createStore, applyMiddleware } from 'redux'\nimport modules from './modules'\nimport ReduxThunk from 'redux-thunk'\n\nconst store = createStore(modules, applyMiddleware(ReduxThunk))\n\nexport default store\n","import React, { Component } from 'react'\nimport { bindActionCreators } from 'redux'\nimport { connect } from 'react-redux'\nimport { getDataAsync } from '../../store/modules'\nimport loadJs from 'load-js'\n\nconst styleOptions = {\n  fillOpacity: 0.6,\n  fillColor: '#ff0000',\n  strokeColor: '#ff0000',\n  strokeWeight: 2,\n  strokeOpacity: 0.5\n}\n\nclass Map extends Component {\n  constructor () {\n    super()\n    this.map = React.createRef()\n  }\n\n  loadScriptPromise (_ncpClientId) {\n    const requestUrl = `https://openapi.map.naver.com/openapi/v3/maps.js?ncpClientId=${_ncpClientId}&submodules=geocoder`\n    return loadJs(requestUrl).then(() =>\n      new Promise(resolve => {\n        window.naver.maps.onJSContentLoaded = () => {\n          resolve(window.naver)\n        }\n      })\n    )\n  }\n\n  componentDidMount () {\n    const { ncpClientId, getDataAsync, _lat, _lng, zoomLevel } = this.props\n\n    this.loadScriptPromise(ncpClientId).then((naver) => {\n      let zoomRange = [2, 4, 6]\n      let maxZoom = zoomRange[zoomRange.length - 1]\n      let minZoom = zoomRange[0]\n\n      // 전국 : 2, 시군구 :4  읍면동 : 7\n      // naver.maps. PointBounds 경계 생성.\n      // 인터렉션 옵션.\n      const mapOptions = {\n        logoControl: false,\n        mapDataControl: false,\n        scaleControl: false,\n        center: new naver.maps.LatLng(_lat, _lng), // 충주\n        draggable: false,\n        scrollWheel: false,\n        keyboardShortcuts: false,\n        disableDoubleTapZoom: true,\n        disableDoubleClickZoom: true,\n        disableTwoFingerTapZoom: true,\n        zoom: zoomLevel,\n        // baseTileOpacity: 0.5,\n        maxZoom: maxZoom,\n        minZoom: minZoom\n      }\n      const map = new naver.maps.Map('map', mapOptions)\n\n      this.setState((prevState) => {\n        return ({\n          ...prevState,\n          newMap: map,\n          parentCd: []\n        })\n      })\n\n      map.data.setStyle(function (feature) {\n        const korLv = feature.property_KOR_LV\n\n        switch (korLv) {\n          case '좋음':\n            styleOptions.fillColor = '#117cf6'\n            break\n          case '보통':\n            styleOptions.fillColor = '#50af32'\n            break\n          case '나쁨':\n            styleOptions.fillColor = '#c4b341'\n            break\n          case '매우나쁨':\n            styleOptions.fillColor = '#d36f36'\n            break\n        }\n\n        return styleOptions\n      })\n\n      map.data.addListener('mouseover', function (e) {\n        map.data.overrideStyle(e.feature, {\n          strokeWeight: 8\n        })\n\n        map.data.addListener('mouseout', function (e) {\n          map.data.revertStyle()\n        })\n      })\n\n      // zoom UP\n      map.data.addListener('click', (e) => {\n        const feature = e.feature\n        const { x: _lng, y: _lat } = e.feature.bounds.getCenter()\n        const currentZoom = map.getZoom()\n\n        if (maxZoom > currentZoom) {\n          const parentCd = feature.property_LOC_CD\n          const zoomLevel = zoomRange[zoomRange.indexOf(currentZoom) + 1] || currentZoom\n          const tempArr = this.state.parentCd.slice()\n\n          this.setState({ 'parentCd': tempArr })\n          tempArr.push(parentCd)\n          map.setZoom(zoomLevel)\n          map.setCenter(new naver.maps.LatLng(_lat, _lng))\n          getDataAsync({ _lat, _lng, zoomLevel, naver, map, parentCd, feature })\n        }\n      })\n\n      // zoom Down\n      map.data.addListener('rightclick', (e) => {\n        const { x: _lng, y: _lat } = e.feature.bounds.getCenter()\n        const currentZoom = map.getZoom()\n\n        if (minZoom < currentZoom) {\n          const nextIdx = zoomRange.indexOf(currentZoom) - 1\n          const zoomLevel = zoomRange[nextIdx] || currentZoom\n          map.setZoom(zoomLevel)\n          map.setCenter(new naver.maps.LatLng(_lat, _lng))\n\n          const parentCd = this.state.parentCd.shift()\n          getDataAsync({ _lat, _lng, zoomLevel, naver, map, parentCd })\n        }\n      })\n\n      return getDataAsync({ _lat, _lng, zoomLevel, naver, map })\n    }).catch((ex) => {\n      console.error(ex)\n    })// END _promise\n  }\n\n  shouldComponentUpdate (props, state) {\n    const { data } = props\n\n    if (data && data.geoData) {\n      let allFeature = state.newMap.data.getAllFeature()\n\n      if (allFeature.length > 0) {\n        while (allFeature.length > 0) {\n          let item = allFeature[0]\n          state.newMap.data.removeFeature(item)\n        }\n      }\n\n      data.geoData.forEach(element => {\n        state.newMap.data.addGeoJson(element)\n      })\n    }\n    return true\n  }\n\n  render () {\n    return (\n      <>\n        <div id=\"map\" style={{ width: '100%', height: 600 + 'px' }} ref={this.map}></div>\n        {/* {JSON.stringify(data)} */}\n      </>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  mapObj: state.mapObj,\n  _lat: state.lat,\n  _lng: state.lng,\n  zoomLevel: state.zoomLevel,\n  data: state.data\n})\n\nconst maDispatchToPrope = (dispatch) => ({\n  getDataAsync: bindActionCreators(getDataAsync, dispatch)\n})\n\nexport default connect(mapStateToProps, maDispatchToPrope)(Map)\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport Map from '../Map'\nimport 'tui-grid/dist/tui-grid.css'\nimport Grid from '@toast-ui/react-grid'\nimport { bindActionCreators } from 'redux'\nimport { getDataAsync } from '../../store/modules'\n\nconst columns = [\n  { name: 'id', title: '지역' },\n  { name: 'name', title: '수치' },\n  { name: 'etc', title: '단계' }\n]\n\n// 함수형 컴포넌트\nconst App = ({ gridData }) => {\n  return (\n    <>\n      <Map ncpClientId={process.env.REACT_APP_SERVICEKEY}/>\n      <Grid\n        data={gridData}\n        columns={columns}\n        rowHeight={25}\n        bodyHeight={100}\n        virtualScrolling={true}\n        heightResizable={false}\n        rowHeaders={['rowNum']}\n      />\n    </>\n  )\n}\n\nconst mapStateToProps = (state) => ({\n  gridData: state.gridData\n})\n\nconst maDispatchToPrope = (dispatch) => ({\n  getDataAsync: bindActionCreators(getDataAsync, dispatch)\n})\n\nexport default connect(mapStateToProps, maDispatchToPrope)(App)\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport store from './store'\n\nimport App from './component/App'\n\nimport './index.css'\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}